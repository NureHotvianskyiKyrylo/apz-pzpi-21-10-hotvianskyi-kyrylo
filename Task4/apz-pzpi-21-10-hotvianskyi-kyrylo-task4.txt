1 ОПИС АРХІТЕКТУРИ КЛІЄНТСЬКОЇ ЧАСТИНИ
     
Для написання клієнтської частини системи було обрано мову програмування TypeScript з використанням технології React, що забезпечує високу швидкодію розробки і зручність у використанні за рахунок статичної типізації та компонентного підходу.
Для реалізації елементів інтерфейсу було використано бібліотеки Material UI, які надають готові та стилізовані компоненти інтерфейсу для швидкої і зручної розробки візуально привабливого веб-додатку.
Для реалізації локалізації інтерфейсу було використано бібліотеку i18next, що дозволяє легко і ефективно впроваджувати багатомовний інтерфейс та забезпечує зручний механізм перекладу текстових рядків.
Для реалізації навігації по сайту використано бібліотеку react-router-dom, яка надає зручні та потужні інструменти для створення реактивної навігації та управління маршрутами веб-додатку.
Для виконання асинхронних запитів на сервер використано бібліотеку axios, яка забезпечує зручний та потужний інтерфейс для взаємодії з HTTP-запитами та дозволяє легко обробляти відповіді від сервера.
Для розгортання серверу використано інструмент побудови Vite, який надає швидкий та ефективний спосіб розгортання веб-додатків, дозволяючи легко налаштовувати середовище розробки та підтримує автоматичне оновлення в реальному часі.
Для візуалізації використаних пакетів було розроблено діаграму пакетів (див. рис. 1).
Розроблено клієнтську частину за допомогою Feature-Sliced архітектури. Вона визначає побудову проєкта за допомогою шарів. 
Шари включають зрізи, які в свою чергу включають сегменти. Шари – це каталоги верхнього рівня застосунку. У проєкті визначено 7 шарів: app, pages, components, features, interfaces, context та hooks. Шар app визначає основну конфігурацію застосунку. Шар pages містить сторінки сайту. Шар components містить різні компоненти інтерфейсу, які можна перевикористовувати. Шар features відповідає за функціонал застосунку. Він визначає дії, доступні користувачу в системі. Шар interfaces визначає інтерфейси моделей, які використовуються для обміну даними з сервером та їхнього представлення на сторінках. Шар context визначає об’єкти контексту, які дозволяють передачу даних іншим компонентам, які відповідають контексту. Шар hooks відповідає за об’єкти хуків, які дозволяють компонентам отримувати доступ до станів системи. 
Для більш детальної візуалізації використаних технологій було розроблено діаграму компонентів (див. додат. Б.1).

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Користувачами клієнтської частини розробленої системи є 2 типи акторів: адміністратор та член басейну.
Основними потребами клієнта є: можливість подавати заяву у басейн, дивитись свій профіль, бачити свої здані виміри, отримувати рекомендації згідно вимірів
Основними потребами адміністратора є: адміністрування басейну, адміністрування користувачів, експортування/імпортування даних.
Взаємодію кожної ролі користувачів з клієнтською частиною системи представлено на діаграмі прецедентів (див. додат. А.1).
Таким чином, за допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію різних типів користувачів із системою.

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ
 
Для написання клієнтської частини системи було обрано мову програмування TypeScript з використанням технології React, що забезпечує високу швидкодію розробки і зручність у використанні за рахунок статичної типізації та компонентного підходу.
Для реалізації елементів інтерфейсу було використано бібліотеки Material UI, які надають готові та стилізовані компоненти інтерфейсу для швидкої і зручної розробки візуально привабливого веб-додатку.
Для реалізації локалізації інтерфейсу було використано бібліотеку i18next, що дозволяє легко і ефективно впроваджувати багатомовний інтерфейс та забезпечує зручний механізм перекладу текстових рядків.
Для реалізації навігації по сайту використано бібліотеку react-router-dom, яка надає зручні та потужні інструменти для створення реактивної навігації та управління маршрутами веб-додатку.
Для виконання асинхронних запитів на сервер використано бібліотеку axios, яка забезпечує зручний та потужний інтерфейс для взаємодії з HTTP-запитами та дозволяє легко обробляти відповіді від сервера.
Для розгортання серверу використано інструмент побудови Vite, який надає швидкий та ефективний спосіб розгортання веб-додатків, дозволяючи легко налаштовувати середовище розробки та підтримує автоматичне оновлення в реальному часі.
Для візуалізації використаних пакетів було розроблено діаграму пакетів (див. рис. 1).

4 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ
 
Розроблено клієнтську частину за допомогою Feature-Sliced архітектури. Вона визначає побудову проєкта за допомогою шарів. 
Шари включають зрізи, які в свою чергу включають сегменти. Шари – це каталоги верхнього рівня застосунку. У проєкті визначено 7 шарів: app, pages, components, features, interfaces, context та hooks. Шар app визначає основну конфігурацію застосунку. Шар pages містить сторінки сайту. Шар components містить різні компоненти інтерфейсу, які можна перевикористовувати. Шар features відповідає за функціонал застосунку. Він визначає дії, доступні користувачу в системі. Шар interfaces визначає інтерфейси моделей, які використовуються для обміну даними з сервером та їхнього представлення на сторінках. Шар context визначає об’єкти контексту, які дозволяють передачу даних іншим компонентам, які відповідають контексту. Шар hooks відповідає за об’єкти хуків, які дозволяють компонентам отримувати доступ до станів системи. 
Для більш детальної візуалізації архітектури системи було розроблено діаграму компонентів (див. додат. Б.1).

5 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

Взаємодія користувача з клієнтською частиною починається з введення даних профілю (при реєстрації або входу). Після авторизації, згідно ролі користувача, взаємодія розділяється на клієнтську та адміністраторську.
Клієнт має можливість записатись у басейн. Для цього він у своєму профілі обирає доступний басейн зі списку та очікує схвалення або відхилення заяви від адміністратору басейну. Також клієнт може отримувати рекомендації за вимірами, які він здав у басейні.
Адміністратор має можливість керування басейнами, набирати членів до басейну та експортувати дані.
Для більш детальної візуалізації взаємодії користувачів з клієнтської частиною системи було розроблено діаграму взаємодії (див. додат. В.1). 
Таким чином, за допомогою діаграм пакетів, компонентів та взаємодії було визначено основні технології та архітектуру системи.
Приклади коду клієнтської частини системи представлено у додатку Г.

ВИСНОВКИ

У ході виконання лабораторної роботи були отримані навички з проєктування клієнтської частини програмної системи. 
Результатом роботи є розроблена програмна реалізація клієнтської частини програмної системи з використанням React. 
При розробці продукту дотримувались вимоги до чистого коду мови програмування Typescript.
