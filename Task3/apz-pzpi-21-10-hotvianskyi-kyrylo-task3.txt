1 ОПИС АРХІТЕКТУРИ IOT ЧАСТИНИ
     
Для демонстрації функціональних можливостей IoT частини системи було вирішено реалізувати програмний код мовою програмування C#, що максимально відповідає обмеженням апаратних ресурсів IoT пристроїв завдяки можливості компіляції у режимі Native AoT. Для виведення інформації використовую консольний інтерфейс (CLI). Надсилання даних реалізовано за допомогою бібліотеки System.Net.Http, а самі дані передаються у форматі JSON. 
Програма призначена для тривалого доступу на сервері, де існує таблиця з ідентифікаторами, які можна присвоїти IoT пристрою. Це надає можливість записувати показники датчика протягом тривалого періоду. 
Код програми написано з мінімальною кількістю рядків для оптимізації під пристрої з обмеженою потужністю. Крім того, програма легко портується на реальні IoT пристрої.

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Користувачами IoT частини розробленої системи є 1 тип акторів: член басейну. 
Взаємодію користувача з IoT частиною системи представлено на діаграмі прецедентів (див. рис. 1).

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ
     
Для написання IoT частини системи було обрано мову програмування C#. Компіляція відбувається за допомогою CLR компоненту .NET 8. 
Для створення запитів використовується бібліотека System.Net.Http. Для парсингу об’єктів було використано бібліотеки System.Text.Json та Newtonsoft.Json. 
Для більш детальної візуалізації використаних технологій було розроблено діаграму пакетів (див. рис. 2).

4 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ
     
Зпершу IOT-пристрій під'єднується до Wi-Fi, далі авторизовує користувача за допомогою NFC-браслету, дали зчитує необхідні виміри і надсилає дані на сервер. 
Таким чином, була побудована діаграма взаємодії (див. дод. А).

5 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ
     
Діяльність системи можна описати як взаємодію пристроя і серверної частини. Робота пристроя починається з його увімкнення, потім під’єднання до WiFi. 
Далі зчитуються дані з датчиків. Ці дані відправляються на сервер у обробленому стані і на сервері відбувається генерація рекомендацій.
Ці ж дані відображаються на екрані пристрою.
На основі описаної діяльності пристрою було побудовано діаграму діяльності, що відображає взаємодію пристрою з сервером (див. додат. Б).

ВИСНОВКИ
 
У ході виконання лабораторної роботи були отримані навички з проєктування IoT частини програмної системи. 
Результатом роботи є розроблена програмна реалізація IoT частини програмної системи з використанням Arduino. 
При розробці продукту дотримувались вимоги до чистого коду мови програмування C# та платформи .NET та
враховувались апаратні обмеження пам'яті та обчислювальних потужностей процесора смарт-девайсу.
